# -*- coding: utf-8 -*-
"""Data Science_Customer Segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JiY-FufNMUehqwwp6WQ0vTflk58OigVu
"""

from google.colab import files


uploaded = files.upload()

import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
df = pd.read_csv ("Mall_Customers.csv")

df.info()

df.columns

df.head()

df.describe()

#violin plot which is a combination of density plot and boxplot 
df.drop(["CustomerID"], axis=1, inplace=True)

plt.figure(figsize=(10,6))
plt.title("Frequency of Age")
sns.axes_style("dark")
sns.violinplot(y=df["Age"])
plt.show()

df.dtypes

#check null values
df.isnull().sum()

#gender distribution chart
plt.figure(figsize=(5,5))
sns.countplot(data=df, x='Gender')
plt.show()

#for finding the distribution across different age ranges
age_18to25=df.Age[(df.Age>=18)&(df.Age<=25)]
age_26to35=df.Age[(df.Age>=26)&(df.Age<=35)]
age_36to45=df.Age[(df.Age>=36)&(df.Age<=45)]
age_46to55=df.Age[(df.Age>=46)&(df.Age<=55)]
age_56above=df.Age[(df.Age>=56)]

x=["15-25","26-35", "36-45", "46-55", "55+"]
y=[len((age_18to25).values), len((age_26to35).values), len((age_36to45).values),len((age_46to55).values), len((age_56above).values)]

plt.figure(figsize=(10,8))
sns.barplot(x=x, y=y, palette="rocket")
plt.title("No of customers vs age ranges")
plt.xlabel("Age")
plt.ylabel("No of customers")
plt.show()

ai0_30 = df["Annual Income (k$)"][(df["Annual Income (k$)"]>=0) & (df["Annual Income (k$)"]<=30)]
ai31_60 = df["Annual Income (k$)"][(df["Annual Income (k$)"]>=31) & (df["Annual Income (k$)"]<=60)]
ai61_90 = df["Annual Income (k$)"][(df["Annual Income (k$)"]>=61) & (df["Annual Income (k$)"]<=90)]
ai91_120 = df["Annual Income (k$)"][(df["Annual Income (k$)"]>=91) & (df["Annual Income (k$)"]<=120)]
ai121_150 = df["Annual Income (k$)"][(df["Annual Income (k$)"]>=121) & (df["Annual Income (k$)"]<=150)]

aix= ["$0-30000","$26000-35000","$36000-45000","$46000-55000","$55000+"]
aiy= [len((ai0_30).values), len((ai31_60).values), len((ai61_90).values), len((ai91_120).values), len((ai121_150).values)]

plt.figure(figsize=(10,8))
sns.barplot(x=aix, y=aiy, palette="Spectral")
plt.title("Customers vs Annual Income")
plt.xlabel("Annual Income")
plt.ylabel("Number of Customers")
plt.show()

ss1_20 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=1) & (df["Spending Score (1-100)"]<=20)]
ss21_40 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=21) & (df["Spending Score (1-100)"]<=40)]
ss41_60 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=41) & (df["Spending Score (1-100)"]<=60)]
ss61_80 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=61) & (df["Spending Score (1-100)"]<=80)]
ss81_100 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=81) & (df["Spending Score (1-100)"]<=100)]

ssx=["1-20", "21-40", "41-60", "61-80", "81-100"]
ssy=[len((ss1_20).values), len((ss21_40).values), len((ss41_60).values), len((ss61_80).values), len((ss81_100).values)]

plt.figure(figsize=(10,8))
sns.barplot(x=ssx, y=ssy, palette="mako")
plt.title("No of customers and their spending score")
plt.xlabel("Spending Score")
plt.ylabel("No of Customers")
plt.show()

#density plot for age, annual income and spending score effectively
plt.figure(1,figsize=(15,6))
n=0
for i in ["Age","Annual Income (k$)","Spending Score (1-100)"]:
  n+=1
  plt.subplot(1,3,n)
  plt.subplots_adjust(hspace=0.5, wspace=0.5)
  sns.distplot(df[i],bins=20)
plt.show()

#boxplot function used to get the distribution of data across quartiles of each column
fig, ax=plt.subplots()
fig.set_size_inches(11.7,8.27)
sns.boxplot(data=df, orient="h", palette="Set2",ax=ax)

#distribution of data across male and female using violinplot
plt.figure(1, figsize=(15,7))
n=0
for cols in ["Age","Annual Income (k$)","Spending Score (1-100)"]:
  n+=1
  plt.subplot(1,3,n)
  sns.set(style="whitegrid")
  plt.subplots_adjust(hspace=0.5,wspace=0.5)
  sns.violinplot(x=cols, y="Gender", data=df)
  plt.ylabel("Gender" if n==1 else '')
  plt.title("Violin Plot")
plt.show()

x1=df.loc[:,["Annual Income (k$)","Spending Score (1-100)"]].values

from sklearn.cluster import KMeans 
wcss=[]
for i in range(1,11):
  km=KMeans(n_clusters=i)
  km.fit(x1)
  wcss.append(km.inertia_)

#elbow curve
 plt.figure(figsize=(12,6))
 plt.plot(range(1,11),wcss)
 plt.plot(range(1,11),wcss, linewidth=2, color="red", marker="8")
 plt.xlabel("K Value")
 plt.xticks(np.arange(1,11,1))
 plt.ylabel("WCSS")
 plt.show()

#taking 5 clusters 
km1=KMeans(n_clusters=5)
#fitting the input data
km1.fit(x1)
#predicting the labels of input data 
y=km1.predict(x1)
df["label"]=y
df.head()

#scatterplot of clusters 
plt.figure(figsize=(10,6))
sns.scatterplot(x="Annual Income (k$)",y="Spending Score (1-100)",hue="label", palette=['green','orange','brown','dodgerblue','red'], legend= 'full', data=df,s=60)
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100')
plt.title('Spending Score (1-100) vs Annual Income (k$)')
plt.show()

x4=df.loc[:,["Age","Annual Income (k$)", "Spending Score (1-100)"]].values
wcss=[]
for i in range(1,11):
  km=KMeans(n_clusters=i)
  km.fit(x4)
  wcss.append(km.inertia_)

plt.figure(figsize=(12,6))
plt.plot(range(1,11),wcss)
plt.plot(range(1,11),wcss, linewidth=2, color="red", marker="8")
plt.xlabel("K Value")
plt.xticks(np.arange(1,11,1))
plt.ylabel("WCSS")
plt.show()

